// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SWD392.Server.Models;

#nullable disable

namespace SWD392.Server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250531211244_InitStringId")]
    partial class InitStringId
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Articles", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("published_by")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.HasIndex("published_by");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("SWD392.Server.Models.Applications", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Programsid")
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Userid")
                        .HasColumnType("character varying(50)");

                    b.Property<string>("programs_id")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.Property<string>("student_id")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.Property<string>("submission_data")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("submitted_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.HasIndex("Programsid");

                    b.HasIndex("Userid");

                    b.HasIndex("programs_id");

                    b.HasIndex("student_id");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("SWD392.Server.Models.Appointments", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Userid")
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Userid1")
                        .HasColumnType("character varying(50)");

                    b.Property<string>("consultant_id")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("create_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("scheduled_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("student_id")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("update_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.HasIndex("Userid");

                    b.HasIndex("Userid1");

                    b.HasIndex("consultant_id");

                    b.HasIndex("student_id");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("SWD392.Server.Models.Email_verifications", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("is_verified")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("sent_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("userid")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.Property<string>("verification_code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("userid");

                    b.ToTable("Email_verifications");
                });

            modelBuilder.Entity("SWD392.Server.Models.Feedback", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Userid")
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Userid1")
                        .HasColumnType("character varying(50)");

                    b.Property<string>("comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("consultant_id")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("rating")
                        .HasColumnType("integer");

                    b.Property<bool>("resolved")
                        .HasColumnType("boolean");

                    b.Property<string>("response")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("student_id")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.HasKey("id");

                    b.HasIndex("Userid");

                    b.HasIndex("Userid1");

                    b.HasIndex("consultant_id");

                    b.HasIndex("student_id");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("SWD392.Server.Models.Payments", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("amount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("purpose")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("user_id")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.Property<string>("vnp_order_info")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("vnp_pay_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("vnp_response_code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("vnp_txn_ref")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("id");

                    b.HasIndex("user_id");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("SWD392.Server.Models.Programs", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("admission_requirements")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("dormitory_info")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("tuition_fee")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Programs");
                });

            modelBuilder.Entity("SWD392.Server.Models.Role", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("SWD392.Server.Models.Tickets", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("consultant_id")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("student_id")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.Property<string>("subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.HasIndex("consultant_id");

                    b.HasIndex("student_id");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("SWD392.Server.Models.User", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("create_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("is_active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("id");

                    b.HasIndex("RoleId");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("Articles", b =>
                {
                    b.HasOne("SWD392.Server.Models.User", "User")
                        .WithMany("Articles")
                        .HasForeignKey("published_by")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SWD392.Server.Models.Applications", b =>
                {
                    b.HasOne("SWD392.Server.Models.Programs", null)
                        .WithMany("Applications")
                        .HasForeignKey("Programsid");

                    b.HasOne("SWD392.Server.Models.User", null)
                        .WithMany("Applications")
                        .HasForeignKey("Userid");

                    b.HasOne("SWD392.Server.Models.Programs", "Programs")
                        .WithMany()
                        .HasForeignKey("programs_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SWD392.Server.Models.User", "Student")
                        .WithMany()
                        .HasForeignKey("student_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Programs");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SWD392.Server.Models.Appointments", b =>
                {
                    b.HasOne("SWD392.Server.Models.User", null)
                        .WithMany("ConsultantAppointments")
                        .HasForeignKey("Userid");

                    b.HasOne("SWD392.Server.Models.User", null)
                        .WithMany("StudentAppointments")
                        .HasForeignKey("Userid1");

                    b.HasOne("SWD392.Server.Models.User", "Consultant")
                        .WithMany()
                        .HasForeignKey("consultant_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SWD392.Server.Models.User", "Student")
                        .WithMany()
                        .HasForeignKey("student_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Consultant");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SWD392.Server.Models.Email_verifications", b =>
                {
                    b.HasOne("SWD392.Server.Models.User", "User")
                        .WithMany("Email_verifications")
                        .HasForeignKey("userid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SWD392.Server.Models.Feedback", b =>
                {
                    b.HasOne("SWD392.Server.Models.User", null)
                        .WithMany("ConsultantFeedbacks")
                        .HasForeignKey("Userid");

                    b.HasOne("SWD392.Server.Models.User", null)
                        .WithMany("StudentFeedbacks")
                        .HasForeignKey("Userid1");

                    b.HasOne("SWD392.Server.Models.User", "Consultant")
                        .WithMany()
                        .HasForeignKey("consultant_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SWD392.Server.Models.User", "Student")
                        .WithMany()
                        .HasForeignKey("student_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Consultant");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SWD392.Server.Models.Payments", b =>
                {
                    b.HasOne("SWD392.Server.Models.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SWD392.Server.Models.Tickets", b =>
                {
                    b.HasOne("SWD392.Server.Models.User", "Consultant")
                        .WithMany()
                        .HasForeignKey("consultant_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SWD392.Server.Models.User", "Student")
                        .WithMany()
                        .HasForeignKey("student_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Consultant");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SWD392.Server.Models.User", b =>
                {
                    b.HasOne("SWD392.Server.Models.Role", null)
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SWD392.Server.Models.Programs", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("SWD392.Server.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SWD392.Server.Models.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Articles");

                    b.Navigation("ConsultantAppointments");

                    b.Navigation("ConsultantFeedbacks");

                    b.Navigation("Email_verifications");

                    b.Navigation("Payments");

                    b.Navigation("StudentAppointments");

                    b.Navigation("StudentFeedbacks");
                });
#pragma warning restore 612, 618
        }
    }
}
